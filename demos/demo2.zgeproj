<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Comment="Created by Rado1" Caption="ZgeNano Demo 2" ClearColor="0 0 0 1" AmbientLightColor="0.502 0.502 0.502 1" ScreenMode="0" ViewportRatio="3" ClipFar="1000" MouseVisible="255" UseStencilBuffer="255" FileVersion="2" AndroidPackageName="com.rado1.ZgeNanoVGDemo1">
  <OnLoaded>
    <ZExternalLibrary Comment="ZgeNano vector graphics rendering library" ModuleName="ZgeNano" CallingConvention="1">
      <Source>
<![CDATA[/*
  ZgeNano Library; a vector graphics rendering library
  build on NanoVG: https://github.com/memononen/nanovg
  and NanoSVG: https://github.com/memononen/nanosvg

  Download Windows DLL and Android shared library from
  TBD

  Project home
  TBD

  Copyright (c) 2016 Radovan Cervenka
*/

// init flags
const int
  NVG_ANTIALIAS = 1<<0,
	NVG_STENCIL_STROKES = 1<<1,
	NVG_DEBUG = 1<<2;

// solidity
const int
  NVG_SOLID = 1,
	NVG_HOLE = 2;

// line caps
const int
	NVG_BUTT = 0,
	NVG_ROUND = 1,
	NVG_SQUARE = 2,
	NVG_BEVEL = 3,
	NVG_MITER = 4;

// align
const int
	// Horizontal align
	NVG_ALIGN_LEFT 		= 1<<0,	// Default, align text horizontally to left.
	NVG_ALIGN_CENTER 	= 1<<1,	// Align text horizontally to center.
	NVG_ALIGN_RIGHT 	= 1<<2,	// Align text horizontally to right.
	// Vertical align
	NVG_ALIGN_TOP 		= 1<<3,	// Align text vertically to top.
	NVG_ALIGN_MIDDLE	= 1<<4,	// Align text vertically to middle.
	NVG_ALIGN_BOTTOM	= 1<<5,	// Align text vertically to bottom.
	NVG_ALIGN_BASELINE	= 1<<6; // Default, align text vertically to baseline.

// blend factor
const int
	NVG_ZERO = 1<<0,
	NVG_ONE = 1<<1,
	NVG_SRC_COLOR = 1<<2,
	NVG_ONE_MINUS_SRC_COLOR = 1<<3,
	NVG_DST_COLOR = 1<<4,
	NVG_ONE_MINUS_DST_COLOR = 1<<5,
	NVG_SRC_ALPHA = 1<<6,
	NVG_ONE_MINUS_SRC_ALPHA = 1<<7,
	NVG_DST_ALPHA = 1<<8,
	NVG_ONE_MINUS_DST_ALPHA = 1<<9,
	NVG_SRC_ALPHA_SATURATE = 1<<10;

// composite operation
const int
	NVG_SOURCE_OVER = 0,
	NVG_SOURCE_IN = 1,
	NVG_SOURCE_OUT = 2,
	NVG_ATOP = 3,
	NVG_DESTINATION_OVER = 4,
	NVG_DESTINATION_IN = 5,
	NVG_DESTINATION_OUT = 6,
	NVG_DESTINATION_ATOP = 7,
	NVG_LIGHTER = 8,
	NVG_COPY = 9,
	NVG_XOR = 10;

// image flags
const int
  NVG_IMAGE_GENERATE_MIPMAPS	= 1<<0,     // Generate mipmaps during creation of the image.
	NVG_IMAGE_REPEATX			= 1<<1,		// Repeat image in X direction.
	NVG_IMAGE_REPEATY			= 1<<2,		// Repeat image in Y direction.
	NVG_IMAGE_FLIPY				= 1<<3,		// Flips (inverses) image in Y direction when rendered.
	NVG_IMAGE_PREMULTIPLIED		= 1<<4;		// Image data has premultiplied alpha.

// Init
int nvg_Init(int flags) {}
void nvg_Finish() {}

// Drawing
void nvg_BeginFrame() {}
void nvg_CancelFrame() {}
void nvg_EndFrame() {}

// Global composite operation
void nvg_GlobalCompositeOperation(int op) {}
void nvg_GlobalCompositeBlendFunc(int sfactor, int dfactor) {}
void nvg_GlobalCompositeBlendFuncSeparate(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {}

// State handling
void nvg_Save() {}
void nvg_Restore() {}
void nvg_Reset() {}

// Render styles
void nvg_StrokeColor(float r, float g, float b, float a) {}
void nvg_StrokePaint(xptr paint) {} // paint - result of Paints functions
void nvg_FillColor(float r, float g, float b, float a) {}
void nvg_FillPaint(xptr paint) {} // paint - result of Paints functions
void nvg_MiterLimit(float limit) {}
void nvg_StrokeWidth(float size) {}
void nvg_LineCap(int cap) {}
void nvg_LineJoin(int join) {}
void nvg_GlobalAlpha(float alpha) {}

// Transformations
void nvg_ResetTransform() {}
void nvg_Transform(float a, float b, float c, float d, float e, float f) {}
void nvg_Translate(float x, float y) {}
void nvg_Rotate(float angle) {}
void nvg_SkewX(float angle) {}
void nvg_SkewY(float angle) {}
void nvg_Scale(float x, float y) {}

// Images
int nvg_CreateImage(string filename, int imageFlags) {}
int nvg_CreateImageMem(int imageFlags, xptr data, int ndata) {}
int nvg_CreateImageRGBA(int w, int h, int imageFlags, xptr data) {}
void nvg_UpdateImage(int image, xptr data) {}
void nvg_ImageSize(int image, ref int w, ref int h) {}
void nvg_DeleteImage(int image) {}

// Paints
xptr nvg_LinearGradient(float sx, float sy, float ex, float ey,
	float ir, float ig, float ib, float ia,
	float or, float og, float ob, float oa) {}
xptr nvg_BoxGradient(float x, float y, float w, float h, float r, float f,
	float ir, float ig, float ib, float ia,
	float or, float og, float ob, float oa) {}
xptr nvg_RadialGradient(float cx, float cy, float inr, float outr,
	float ir, float ig, float ib, float ia,
	float or, float og, float ob, float oa) {}
xptr nvg_ImagePattern(float ox, float oy, float ex, float ey,
	float angle, int image, float alpha) {}
void nvg_FreePaint(xptr paint) {}

// Scissoring
void nvg_Scissor(float x, float y, float w, float h) {}
void nvg_IntersectScissor(float x, float y, float w, float h) {}
void nvg_ResetScissor() {}

// Paths
void nvg_BeginPath() {}
void nvg_MoveTo(float x, float y) {}
void nvg_LineTo(float x, float y) {}
void nvg_BezierTo(float c1x, float c1y, float c2x, float c2y, float x, float y) {}
void nvg_QuadTo(float cx, float cy, float x, float y) {}
void nvg_ArcTo(float x1, float y1, float x2, float y2, float radius) {}
void nvg_ClosePath() {}
void nvg_PathWinding(int dir) {}
void nvg_Arc(float cx, float cy, float r, float a0, float a1, int dir) {}
void nvg_Rect(float x, float y, float w, float h) {}
void nvg_RoundedRect(float x, float y, float w, float h, float r) {}
void nvg_RoundedRectVarying(float x, float y, float w, float h,
	float radTopLeft, float radTopRight, float radBottomRight, float radBottomLeft) {}
void nvg_Ellipse(float cx, float cy, float rx, float ry) {}
void nvg_Circle(float cx, float cy, float r) {}
void nvg_Fill() {}
void nvg_Stroke() {}

// Text
int nvg_CreateFont(string name, string filename) {}
int nvg_CreateFontMem(string name, xptr data, int ndata, int freeData) {}
int nvg_FindFont(string name) {}
int nvg_AddFallbackFontId(int baseFont, int fallbackFont) {}
int nvg_AddFallbackFont(string baseFont, string fallbackFont) {}
void nvg_FontSize(float size) {}
void nvg_FontBlur(float blur) {}
void nvg_TextLetterSpacing(float spacing) {}
void nvg_TextLineHeight(float lineHeight) {}
void nvg_TextAlign(int align) {}
void nvg_FontFaceId(int font) {}
void nvg_FontFace(string font) {}
void nvg_Text(float x, float y, string str, string end) {}
void nvg_TextBox(float x, float y, float breakRowWidth, string str, string end) {}
float nvg_TextBounds(float x, float y, string str, string end, vec4 bounds) {}
void nvg_TextBoxBounds(float x, float y, float breakRowWidth, string str, string end, vec4 bounds) {}
void nvg_TextMetrics(ref float ascender, ref float descender, ref float lineh) {}

// SVG support
xptr nsvg_ParseFromFile(string filename, string units, float dpi) {}
xptr nsvg_ParseMem(xptr data, int ndata, string units, float dpi) {}
void nsvg_ImageSize(xptr image, ref float width, ref float height) {}
void nsvg_Draw(xptr image, string idPrefix, float alpha) {}
void nsvg_Rasterize(xptr image, float tx, float ty, float scale, xptr dst, int w, int h) {}
void nsvg_Delete(xptr image) {}]]>
      </Source>
    </ZExternalLibrary>
    <ZLibrary Comment="Globals">
      <Source>
<![CDATA[const int SCREEN_WIDTH = 32, SCREEN_HEIGHT = 18;

float ScreenScaleX, ScreenScaleY;
float[SCREEN_WIDTH+1, SCREEN_HEIGHT+1, 5] BgArray;]]>
      </Source>
    </ZLibrary>
    <ZExpression Comment="Init">
      <Expression>
<![CDATA[// init screen scale
ScreenScaleX = App.ViewportWidth / SCREEN_WIDTH;
ScreenScaleY = App.ViewportHeight / SCREEN_HEIGHT;

// init nanovg
nvg_Init(NVG_ANTIALIAS | NVG_STENCIL_STROKES);]]>
      </Expression>
    </ZExpression>
    <SetAppState State="MainAppState"/>
  </OnLoaded>
  <States>
    <AppState Name="MainAppState" CollisionsEnabled="0">
      <OnUpdate>
        <ZExpression>
          <Expression>
<![CDATA[float t = App.Time * 0.05;
float a, b, c;

for(int x = 0; x <= SCREEN_WIDTH; ++x)
  for(int y = 0; y <= SCREEN_HEIGHT; ++y){
    a = noise2(x*0.1 + t, y*0.1 - t);
    b = noise2(y*0.1 + t, x*0.1 - t);

    BgArray[x, y, 0] = (x>0 && x < SCREEN_WIDTH) ? a*3 : 0; // X position delta
    BgArray[x, y, 1] = (y>0 && y < SCREEN_HEIGHT) ? b*3 : 0; // Y position delta
    BgArray[x, y, 2] = 0.5 + a*2; // R
    BgArray[x, y, 3] = 0.5 + b*2; // G
    BgArray[x, y, 4] = 0.5 - a - b; // B

  }]]>
          </Expression>
        </ZExpression>
      </OnUpdate>
      <OnRender>
        <ZExpression>
          <Expression>
<![CDATA[int a, b;

nvg_BeginFrame();
nvg_Scale(ScreenScaleX, ScreenScaleX);

for(int x = 0; x < SCREEN_WIDTH; ++x)
  for(int y = 0; y < SCREEN_HEIGHT; ++y){
    nvg_BeginPath();
    nvg_MoveTo(x + BgArray[x, y, 0], y + BgArray[x, y, 1]);
    nvg_LineTo(x+1 + BgArray[x+1, y, 0], y + BgArray[x+1, y, 1]);
    nvg_LineTo(x+1 + BgArray[x+1, y+1, 0], y+1 + BgArray[x+1, y+1, 1]);
    nvg_LineTo(x + BgArray[x, y+1, 0], y+1 + BgArray[x, y+1, 1]);

    nvg_FillColor(BgArray[x, y, 2], BgArray[x, y, 3], BgArray[x, y, 4], 1);
    nvg_Fill();

    nvg_StrokeWidth(0.01);
    nvg_StrokeColor(0, 0, 0, 1);
    nvg_Stroke();

    if(x && y) {
      nvg_BeginPath();
      nvg_Circle(
        x + BgArray[x, y, 0],
        y + BgArray[x, y, 1],
        (abs(BgArray[x, y, 0]) + abs(BgArray[x, y, 1])) * 0.25);

      nvg_FillColor(1, 1, 1, 1);
      nvg_Fill();
    }
  }

nvg_EndFrame();]]>
          </Expression>
        </ZExpression>
      </OnRender>
    </AppState>
  </States>
  <OnClose>
    <ZExpression Comment="Release resources" Expression="nvg_Finish();"/>
  </OnClose>
</ZApplication>
